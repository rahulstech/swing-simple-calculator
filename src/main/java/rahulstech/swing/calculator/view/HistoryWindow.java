/**
 * Copyright 2021 rahulstech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rahulstech.swing.calculator.view;

import rahulstech.swing.calculator.history.HistoryEntry;
import rahulstech.swing.calculator.history.HistoryStorage;

import javax.swing.*;
import java.util.Collections;
import java.util.List;

/**
 * This screen will show the history
 *
 * @author Rahul Bagchi
 */
public class HistoryWindow extends javax.swing.JFrame {

    private HistoryListModel model;
    private OnChooseHistoryEntryListener listener;

    /**
     * Creates new form HistoryWindow
     */
    public HistoryWindow() {
        initComponents();
        model = new HistoryListModel(HistoryStorage.getHistory());
        historyList.setModel(model);
        historyList.addListSelectionListener(e -> {
            onClickHistoryEntry(model.getElementAt(e.getFirstIndex()));
        });
    }

    public void setOnChooseHistoryEntryListener(OnChooseHistoryEntryListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("History");
        setResizable(false);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, 32));
        jLabel1.setText("History");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rahulstech/swing/calculator/view/delete.png"))); // NOI18N
        jButton1.setToolTipText("clear history");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClickClearHistory(evt);
            }
        });

        historyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(historyList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onClickClearHistory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClickClearHistory
        HistoryStorage.clearHistory();
        exit();
    }//GEN-LAST:event_onClickClearHistory

    private void onClickHistoryEntry(HistoryEntry entry) {
        SwingUtilities.invokeLater(()->{
            if (null != listener) {
                listener.onChooseHistoryEntry(entry);
            }
        });
        exit();
    }

    private void exit() {
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<HistoryEntry> historyList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * An listener class, called when an history entry is slected
     * from the list
     */
    public interface OnChooseHistoryEntryListener {
        void onChooseHistoryEntry(HistoryEntry entry);
    }

    /**
     * An {@link ListModel} subclass backed by a {@link List}
     */
    private class HistoryListModel extends AbstractListModel<HistoryEntry> {

        private List<HistoryEntry> entries;

        public HistoryListModel(List<HistoryEntry> entries) {
            this.entries = null == entries ? Collections.emptyList() : entries;
        }

        @Override
        public int getSize() {
            return entries.size();
        }

        @Override
        public HistoryEntry getElementAt(int index) {
            return entries.get(index);
        }
    }
}
